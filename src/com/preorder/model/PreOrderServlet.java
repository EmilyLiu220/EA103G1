package com.preorder.model;

import java.io.*;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.servlet.*;
import javax.servlet.http.*;

import com.preorderdetail.model.PreOrderDetailService;
import com.preorderdetail.model.PreOrderDetailVO;

import tools.MoneyTool;
public class PreOrderServlet extends HttpServlet{
	public void doGet(HttpServletRequest req,HttpServletResponse res)
			throws ServletException,IOException {
		doPost(req,res);
	}
	public void doPost(HttpServletRequest req,HttpServletResponse res)
			throws ServletException,IOException {
		req.setCharacterEncoding("UTF-8");
		HttpSession session = req.getSession();
		String action = req.getParameter("action");
		System.out.println("------------------進入Servlet-----------------------");
		System.out.println("PreOrder - Servlet的action被觸發!");
		
		if("getOne_For_Display".equals(action)) {
			System.out.println("PreOrder - getOne_For_Display被觸發!");
			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);
			
			try {
				String po_no = req.getParameter("po_no");
				System.out.println("po_no = "+po_no);

				/*****************開始查詢*********************/
				PreOrderDetailService preorderdetailSvc = new PreOrderDetailService();
				List<PreOrderDetailVO> preorderdetaillist = preorderdetailSvc.getAllByPo_no(po_no);
				System.out.println("preorderdetailVO = "+preorderdetaillist);
				
				
				if(preorderdetaillist == null) {
					errorMsgs.add("查沒有這筆資料阿...");
				}
				if(!errorMsgs.isEmpty()) {
					RequestDispatcher failureView = req.getRequestDispatcher("/frontend/preproduct/order_Success_List.jsp");
					failureView.forward(req, res);
					return;
				}
				
				/*****************查詢成功準備轉交*********************/
				req.setAttribute("preorderdetailVO",preorderdetaillist);
				req.setAttribute("po_no",po_no);
				String url = "/frontend/preproduct/order_Detail_Page.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url);
				successView.forward(req, res);
				
			} catch (Exception e) {
				errorMsgs.add("無法取得資料，愛你唷"+e.getMessage());
				RequestDispatcher failureView = req.getRequestDispatcher("/frontend/preproduct/order_Success_List.jsp");
				failureView.forward(req,res);
			}
		}
		if("cancel_order".equals(action)) {
			System.out.println("PreOrder - Servlet(取消訂單)被觸發!");
			List<String> errorMsgs = new LinkedList<String>();
			req.setAttribute("errorMsgs", errorMsgs);
			try {
				String formhash = req.getParameter("formhash");
				System.out.println("拿到表單的formhash = "+formhash);
				Set<String> formhashSession = (Set<String>) session.getAttribute("formhashSession");
				System.out.println("拿到session里面的集合 = "+formhashSession);
				
				if(formhashSession == null || !formhashSession.contains(formhash)) {
					errorMsgs.add("重複提交囉!");
					formhashSession.remove(formhash);
					session.setAttribute("formhashSession", formhashSession);
				}else {
					System.out.println("一切正常");
				}
				
				String po_no = req.getParameter("po_no");
				System.out.println("要取消的訂單編號為po_no = "+po_no);
				Integer po_total = (new Integer(req.getParameter("po_total")));
				System.out.println("要退款的金額為po_total = "+po_total);
				
				PreOrderVO preorderVO = new PreOrderVO();
				preorderVO.setPo_no(po_no);
				preorderVO.setPo_total(po_total);
				
				if (!errorMsgs.isEmpty()) {
					req.setAttribute("preorderVO", preorderVO); // 含有輸入格式錯誤的empVO物件,也存入req
					RequestDispatcher failureView = req.getRequestDispatcher("/frontend/preproduct/order_Success_List.jsp");
					failureView.forward(req, res);
					errorMsgs.clear();
					System.out.println("執行errorMsgs.clear()");
					return;
				}
				/*************************** 2.開始退款及刪除資料 ***************************************/
				System.out.println("準備使用MoneyTool工具");
				Boolean ifCheckOutSucess = MoneyTool.checkOut(session, 36, po_no, po_total);
				System.out.println("使用完MoneyTool工具");
				
				
				System.out.println("進入刪除訂單階段");
				PreOrderService preorderSvc = new PreOrderService();
				preorderSvc.deletePreOrder(po_no);
				
				
				/***************************3.刪除完成,準備轉交(Send the Success view)***********/
				System.out.println("操作成功，從Session裡把formhash刪除");
				formhashSession.remove(formhash);
				session.setAttribute("formhashSession", formhashSession);
				session.removeAttribute("formhashSession");

				System.out.println("刪除完成,準備轉交url");
				String url = "/frontend/preproduct/order_Success_List.jsp";
				RequestDispatcher successView = req.getRequestDispatcher(url);// 刪除成功後,轉交回送出刪除的來源網頁
				successView.forward(req, res);
				

			} catch (Exception e) {
				errorMsgs.add("無法取得資料，愛你唷"+e.getMessage());
				RequestDispatcher failureView = req.getRequestDispatcher("/frontend/preproduct/order_Success_List.jsp");
				failureView.forward(req,res);
			}
			
			
		}
	}
}
